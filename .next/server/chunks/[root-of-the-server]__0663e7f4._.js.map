{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/anushri509/CascadeProjects/prime/app/api/orders/create/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport async function POST(request: NextRequest) {\n  try {\n    const orderData = await request.json();\n    \n    const {\n      serviceType,\n      customerName,\n      customerEmail,\n      customerPhone,\n      numberOfTravelers,\n      totalAmount,\n      paymentMethod,\n      status = 'PENDING'\n    } = orderData;\n\n    // Create or find customer\n    let customer = await prisma.customer.findUnique({\n      where: { email: customerEmail }\n    });\n\n    if (!customer) {\n      customer = await prisma.customer.create({\n        data: {\n          email: customerEmail,\n          phone: customerPhone\n        }\n      });\n    }\n\n    // Convert serviceType to enum format\n    const serviceTypeEnum = serviceType.replace('-', '_').toUpperCase() as 'FLIGHT_RESERVATION' | 'HOTEL_BOOKING' | 'TRAVEL_INSURANCE';\n    \n    // Create order\n    const order = await prisma.order.create({\n      data: {\n        id: `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        serviceType: serviceTypeEnum,\n        customerId: customer.id,\n        customerName,\n        customerEmail,\n        customerPhone,\n        numberOfTravelers,\n        totalAmount,\n        paymentMethod,\n        status: status as 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'CANCELLED'\n      }\n    });\n\n    // Create travelers\n    const travelers = [];\n    for (let i = 0; i < numberOfTravelers; i++) {\n      const traveler = await prisma.traveler.create({\n        data: {\n          orderId: order.id,\n          title: 'Mr',\n          firstName: i === 0 ? customerName.split(' ')[0] : `Traveler${i + 1}`,\n          lastName: i === 0 ? customerName.split(' ')[1] || 'Doe' : 'Companion',\n          dateOfBirth: new Date(1990, 0, 1), // Default DOB\n          isPrimary: i === 0\n        }\n      });\n      travelers.push(traveler);\n    }\n\n    return NextResponse.json({\n      success: true,\n      orderId: order.id,\n      message: 'Order created successfully'\n    });\n\n  } catch (error) {\n    console.error('Error creating order:', error);\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Failed to create order',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6IAAY;AAExB,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,YAAY,MAAM,QAAQ,IAAI;QAEpC,MAAM,EACJ,WAAW,EACX,YAAY,EACZ,aAAa,EACb,aAAa,EACb,iBAAiB,EACjB,WAAW,EACX,aAAa,EACb,SAAS,SAAS,EACnB,GAAG;QAEJ,0BAA0B;QAC1B,IAAI,WAAW,MAAM,OAAO,QAAQ,CAAC,UAAU,CAAC;YAC9C,OAAO;gBAAE,OAAO;YAAc;QAChC;QAEA,IAAI,CAAC,UAAU;YACb,WAAW,MAAM,OAAO,QAAQ,CAAC,MAAM,CAAC;gBACtC,MAAM;oBACJ,OAAO;oBACP,OAAO;gBACT;YACF;QACF;QAEA,qCAAqC;QACrC,MAAM,kBAAkB,YAAY,OAAO,CAAC,KAAK,KAAK,WAAW;QAEjE,eAAe;QACf,MAAM,QAAQ,MAAM,OAAO,KAAK,CAAC,MAAM,CAAC;YACtC,MAAM;gBACJ,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;gBAClE,aAAa;gBACb,YAAY,SAAS,EAAE;gBACvB;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA,QAAQ;YACV;QACF;QAEA,mBAAmB;QACnB,MAAM,YAAY,EAAE;QACpB,IAAK,IAAI,IAAI,GAAG,IAAI,mBAAmB,IAAK;YAC1C,MAAM,WAAW,MAAM,OAAO,QAAQ,CAAC,MAAM,CAAC;gBAC5C,MAAM;oBACJ,SAAS,MAAM,EAAE;oBACjB,OAAO;oBACP,WAAW,MAAM,IAAI,aAAa,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,QAAQ,EAAE,IAAI,GAAG;oBACpE,UAAU,MAAM,IAAI,aAAa,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,QAAQ;oBAC1D,aAAa,IAAI,KAAK,MAAM,GAAG;oBAC/B,WAAW,MAAM;gBACnB;YACF;YACA,UAAU,IAAI,CAAC;QACjB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS,MAAM,EAAE;YACjB,SAAS;QACX;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}