{"version":3,"sources":["turbopack:///[project]/app/travel-insurance/page.tsx","turbopack:///[project]/node_modules/date-fns/differenceInDays.js"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Heart, ArrowRight, ArrowLeft, CalendarIcon, Users, Clock, MapPin, Shield } from \"lucide-react\";\nimport { format, differenceInDays } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Traveler {\n  title: string;\n  firstName: string;\n  lastName: string;\n  dateOfBirth: Date | undefined;\n}\n\nexport default function TravelInsurancePage() {\n  const router = useRouter();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [destinationCountry, setDestinationCountry] = useState(\"\");\n  const [travelStartDate, setTravelStartDate] = useState<Date>();\n  const [travelEndDate, setTravelEndDate] = useState<Date>();\n  const [numberOfTravelers, setNumberOfTravelers] = useState(1);\n  const [primaryTraveler, setPrimaryTraveler] = useState<Traveler>({\n    title: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    dateOfBirth: undefined\n  });\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [additionalTravelers, setAdditionalTravelers] = useState<Traveler[]>([]);\n  const [coverageType, setCoverageType] = useState<\"basic\" | \"premium\">(\"basic\");\n  const [purpose, setPurpose] = useState(\"\");\n  const [preExistingConditions, setPreExistingConditions] = useState(\"\");\n  const [specialRequests, setSpecialRequests] = useState(\"\");\n\n  const steps = [\n    { number: 1, title: \"Travel Details\", icon: MapPin },\n    { number: 2, title: \"Traveler Information\", icon: Users },\n    { number: 3, title: \"Coverage & Review\", icon: Shield }\n  ];\n\n  const handleTravelerCountChange = (count: number) => {\n    setNumberOfTravelers(count);\n    const newTravelers = [];\n    for (let i = 1; i < count; i++) {\n      newTravelers.push({ title: \"\", firstName: \"\", lastName: \"\", dateOfBirth: undefined });\n    }\n    setAdditionalTravelers(newTravelers);\n  };\n\n  const updateAdditionalTraveler = (index: number, field: keyof Traveler, value: string | Date) => {\n    const updated = [...additionalTravelers];\n    updated[index] = { ...updated[index], [field]: value };\n    setAdditionalTravelers(updated);\n  };\n\n  const basePrice = 1499;\n  const premiumSurcharge = coverageType === \"premium\" ? 500 : 0;\n  const totalPrice = (basePrice + premiumSurcharge) * numberOfTravelers;\n  const progress = (currentStep / steps.length) * 100;\n\n  const nextStep = () => {\n    if (currentStep < steps.length) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  // Calculate trip duration\n  const tripDuration = travelStartDate && travelEndDate ? \n    differenceInDays(travelEndDate, travelStartDate) + 1 : 0;\n\n  const coverageOptions = [\n    {\n      type: \"basic\",\n      title: \"Basic Coverage\",\n      price: \"₹1,499\",\n      features: [\n        \"Medical coverage up to €30,000\",\n        \"Emergency evacuation coverage\",\n        \"Trip cancellation (up to 50%)\",\n        \"Personal liability coverage\",\n        \"24/7 emergency assistance\",\n        \"Valid for Schengen visa applications\"\n      ]\n    },\n    {\n      type: \"premium\", \n      title: \"Premium Coverage\",\n      price: \"₹1,999\",\n      features: [\n        \"Medical coverage up to €100,000\",\n        \"Emergency evacuation coverage\",\n        \"Trip cancellation (up to 100%)\",\n        \"Personal liability coverage\",\n        \"24/7 emergency assistance\",\n        \"Pre-existing conditions covered\",\n        \"Adventure sports coverage\",\n        \"Extended coverage period\",\n        \"Valid for all visa applications\"\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Badge variant=\"secondary\" className=\"mb-4 bg-purple-100 text-purple-700\">\n            <Heart className=\"w-4 h-4 mr-1\" />\n            Travel Insurance for Visa Application\n          </Badge>\n          <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-2\">\n            Comprehensive Travel Insurance\n          </h1>\n          <p className=\"text-gray-600\">\n            Get embassy-approved travel insurance certificate that meets all visa requirements\n          </p>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            {steps.map((step, index) => {\n              const IconComponent = step.icon;\n              return (\n                <div\n                  key={step.number}\n                  className={`flex flex-col items-center ${\n                    index < steps.length - 1 ? 'flex-1' : ''\n                  }`}\n                >\n                  <div\n                    className={`flex items-center justify-center w-12 h-12 rounded-full border-2 transition-all ${\n                      currentStep >= step.number\n                        ? 'bg-purple-600 border-purple-600 text-white'\n                        : 'border-gray-300 text-gray-500'\n                    }`}\n                  >\n                    <IconComponent className=\"w-5 h-5\" />\n                  </div>\n                  <span className={`mt-2 text-sm font-medium ${\n                    currentStep >= step.number ? 'text-purple-600' : 'text-gray-500'\n                  }`}>\n                    {step.title}\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n          <Progress value={progress} className=\"h-2\" />\n        </div>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              {steps[currentStep - 1].icon && (\n                <span className=\"mr-2\">\n                  {React.createElement(steps[currentStep - 1].icon, { className: \"w-5 h-5\" })}\n                </span>\n              )}\n              Step {currentStep}: {steps[currentStep - 1].title}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Step 1: Travel Details */}\n            {currentStep === 1 && (\n              <div className=\"space-y-6\">\n                <div>\n                  <Label className=\"text-sm font-medium mb-2 block\">\n                    Destination Country/Region <span className=\"text-red-500\">*</span>\n                  </Label>\n                  <div className=\"relative\">\n                    <Input\n                      placeholder=\"Enter destination country or region (e.g., France, Europe, United States)\"\n                      value={destinationCountry}\n                      onChange={(e) => setDestinationCountry(e.target.value)}\n                      className=\"h-12 pl-10\"\n                    />\n                    <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Enter the primary destination for your travel insurance coverage\n                  </p>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label className=\"text-sm font-medium mb-2 block\">\n                      Travel Start Date <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          className={cn(\n                            \"w-full justify-start text-left font-normal h-12\",\n                            !travelStartDate && \"text-muted-foreground\"\n                          )}\n                        >\n                          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                          {travelStartDate ? format(travelStartDate, \"PPP\") : <span>Pick a date</span>}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={travelStartDate}\n                          onSelect={setTravelStartDate}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-sm font-medium mb-2 block\">\n                      Travel End Date <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          className={cn(\n                            \"w-full justify-start text-left font-normal h-12\",\n                            !travelEndDate && \"text-muted-foreground\"\n                          )}\n                        >\n                          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                          {travelEndDate ? format(travelEndDate, \"PPP\") : <span>Pick a date</span>}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={travelEndDate}\n                          onSelect={setTravelEndDate}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </div>\n                </div>\n\n                {tripDuration > 0 && (\n                  <div className=\"bg-purple-50 p-4 rounded-lg\">\n                    <p className=\"text-sm text-purple-700 font-medium\">\n                      Trip Duration: {tripDuration} day{tripDuration > 1 ? 's' : ''}\n                    </p>\n                  </div>\n                )}\n\n                <div>\n                  <Label className=\"text-sm font-medium mb-2 block\">\n                    Number of Travelers <span className=\"text-red-500\">*</span>\n                  </Label>\n                  <Select value={numberOfTravelers.toString()} onValueChange={(value) => handleTravelerCountChange(parseInt(value))}>\n                    <SelectTrigger className=\"w-48 h-12\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {[1,2,3,4,5,6,7,8,9,10].map(num => (\n                        <SelectItem key={num} value={num.toString()}>{num} Traveler{num > 1 ? 's' : ''}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            )}\n\n            {/* Step 2: Traveler Information */}\n            {currentStep === 2 && (\n              <div className=\"space-y-6\">\n                <div>\n                  <Label className=\"text-base font-medium mb-4 block\">Primary Traveler</Label>\n                  <div className=\"grid md:grid-cols-4 gap-4 mb-6\">\n                    <div>\n                      <Label className=\"text-sm font-medium mb-2 block\">\n                        Title <span className=\"text-red-500\">*</span>\n                      </Label>\n                      <Select value={primaryTraveler.title} onValueChange={(value) => setPrimaryTraveler(prev => ({...prev, title: value}))}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"--- Select Choice ---\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Mr\">Mr</SelectItem>\n                          <SelectItem value=\"Mrs\">Mrs</SelectItem>\n                          <SelectItem value=\"Miss\">Miss</SelectItem>\n                          <SelectItem value=\"Dr\">Dr</SelectItem>\n                          <SelectItem value=\"Prof\">Prof</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium mb-2 block\">\n                        First Name <span className=\"text-red-500\">*</span>\n                      </Label>\n                      <Input \n                        value={primaryTraveler.firstName}\n                        onChange={(e) => setPrimaryTraveler(prev => ({...prev, firstName: e.target.value}))}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium mb-2 block\">\n                        Last Name <span className=\"text-red-500\">*</span>\n                      </Label>\n                      <Input \n                        value={primaryTraveler.lastName}\n                        onChange={(e) => setPrimaryTraveler(prev => ({...prev, lastName: e.target.value}))}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium mb-2 block\">\n                        Date of Birth <span className=\"text-red-500\">*</span>\n                      </Label>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            className={cn(\n                              \"w-full justify-start text-left font-normal\",\n                              !primaryTraveler.dateOfBirth && \"text-muted-foreground\"\n                            )}\n                          >\n                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                            {primaryTraveler.dateOfBirth ? format(primaryTraveler.dateOfBirth, \"PP\") : <span>Pick date</span>}\n                          </Button>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\">\n                          <Calendar\n                            mode=\"single\"\n                            selected={primaryTraveler.dateOfBirth}\n                            onSelect={(date) => setPrimaryTraveler(prev => ({...prev, dateOfBirth: date}))}\n                            initialFocus\n                          />\n                        </PopoverContent>\n                      </Popover>\n                    </div>\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\n                    <div>\n                      <Label className=\"text-sm font-medium mb-2 block\">\n                        Email Address <span className=\"text-red-500\">*</span>\n                      </Label>\n                      <Input \n                        type=\"email\"\n                        placeholder=\"your.email@example.com\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                      />\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium mb-2 block\">\n                        Phone Number <span className=\"text-red-500\">*</span>\n                      </Label>\n                      <Input \n                        placeholder=\"+1 234 567 8900\"\n                        value={phone}\n                        onChange={(e) => setPhone(e.target.value)}\n                      />\n                    </div>\n                  </div>\n\n                  {numberOfTravelers > 1 && (\n                    <div>\n                      <Label className=\"text-base font-medium mb-4 block\">\n                        Additional Travelers ({numberOfTravelers - 1})\n                      </Label>\n                      <div className=\"space-y-4\">\n                        {additionalTravelers.map((traveler, index) => (\n                          <div key={index} className=\"grid md:grid-cols-4 gap-4 p-4 border border-gray-200 rounded-lg\">\n                            <div>\n                              <Label className=\"text-sm font-medium mb-2 block\">\n                                Title <span className=\"text-red-500\">*</span>\n                              </Label>\n                              <Select value={traveler.title} onValueChange={(value) => updateAdditionalTraveler(index, 'title', value)}>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"--- Select Choice ---\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"Mr\">Mr</SelectItem>\n                                  <SelectItem value=\"Mrs\">Mrs</SelectItem>\n                                  <SelectItem value=\"Miss\">Miss</SelectItem>\n                                  <SelectItem value=\"Dr\">Dr</SelectItem>\n                                  <SelectItem value=\"Prof\">Prof</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div>\n                              <Label className=\"text-sm font-medium mb-2 block\">\n                                First Name <span className=\"text-red-500\">*</span>\n                              </Label>\n                              <Input \n                                value={traveler.firstName}\n                                onChange={(e) => updateAdditionalTraveler(index, 'firstName', e.target.value)}\n                              />\n                            </div>\n                            <div>\n                              <Label className=\"text-sm font-medium mb-2 block\">\n                                Last Name <span className=\"text-red-500\">*</span>\n                              </Label>\n                              <Input \n                                value={traveler.lastName}\n                                onChange={(e) => updateAdditionalTraveler(index, 'lastName', e.target.value)}\n                              />\n                            </div>\n                            <div>\n                              <Label className=\"text-sm font-medium mb-2 block\">\n                                Date of Birth <span className=\"text-red-500\">*</span>\n                              </Label>\n                              <Popover>\n                                <PopoverTrigger asChild>\n                                  <Button\n                                    variant=\"outline\"\n                                    className={cn(\n                                      \"w-full justify-start text-left font-normal text-sm\",\n                                      !traveler.dateOfBirth && \"text-muted-foreground\"\n                                    )}\n                                  >\n                                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                                    {traveler.dateOfBirth ? format(traveler.dateOfBirth, \"PP\") : <span>Pick date</span>}\n                                  </Button>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"w-auto p-0\">\n                                  <Calendar\n                                    mode=\"single\"\n                                    selected={traveler.dateOfBirth}\n                                    onSelect={(date) => updateAdditionalTraveler(index, 'dateOfBirth', date!)}\n                                    initialFocus\n                                  />\n                                </PopoverContent>\n                              </Popover>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Step 3: Coverage & Review */}\n            {currentStep === 3 && (\n              <div className=\"space-y-6\">\n                <div>\n                  <Label className=\"text-base font-medium mb-4 block\">\n                    Choose Coverage Type <span className=\"text-red-500\">*</span>\n                  </Label>\n                  <RadioGroup\n                    value={coverageType}\n                    onValueChange={(value: \"basic\" | \"premium\") => setCoverageType(value)}\n                    className=\"grid md:grid-cols-2 gap-4\"\n                  >\n                    {coverageOptions.map((option) => (\n                      <Label\n                        key={option.type}\n                        htmlFor={option.type}\n                        className={`relative flex flex-col p-6 border-2 rounded-lg cursor-pointer transition-all ${\n                          coverageType === option.type ? 'border-purple-500 bg-purple-50' : 'border-gray-200'\n                        }`}\n                      >\n                        <RadioGroupItem \n                          value={option.type} \n                          id={option.type}\n                          className=\"absolute top-4 right-4\"\n                        />\n                        <div className=\"mb-4\">\n                          <h3 className=\"text-lg font-semibold mb-2\">{option.title}</h3>\n                          <div className=\"text-2xl font-bold text-purple-600\">{option.price}</div>\n                          <div className=\"text-sm text-gray-500\">per traveler</div>\n                        </div>\n                        <ul className=\"space-y-2 text-sm\">\n                          {option.features.map((feature, idx) => (\n                            <li key={idx} className=\"flex items-start\">\n                              <div className=\"w-1 h-1 rounded-full bg-green-500 mt-2 mr-2 flex-shrink-0\"></div>\n                              {feature}\n                            </li>\n                          ))}\n                        </ul>\n                      </Label>\n                    ))}\n                  </RadioGroup>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium mb-2 block\">\n                    Purpose of Travel <span className=\"text-red-500\">*</span>\n                  </Label>\n                  <Select value={purpose} onValueChange={setPurpose}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"--- Select Choice ---\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Tourism\">Tourism</SelectItem>\n                      <SelectItem value=\"Business Travel\">Business Travel</SelectItem>\n                      <SelectItem value=\"Conference / Meeting\">Conference / Meeting</SelectItem>\n                      <SelectItem value=\"Family Visit\">Family Visit</SelectItem>\n                      <SelectItem value=\"Medical Treatment\">Medical Treatment</SelectItem>\n                      <SelectItem value=\"Education / Studies\">Education / Studies</SelectItem>\n                      <SelectItem value=\"Other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium mb-2 block\">Pre-existing Medical Conditions</Label>\n                  <Textarea \n                    placeholder=\"Please list any pre-existing medical conditions that may require coverage (leave blank if none)\"\n                    value={preExistingConditions}\n                    onChange={(e) => setPreExistingConditions(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium mb-2 block\">Special Requests</Label>\n                  <Textarea \n                    placeholder=\"Enter any special requirements or additional coverage needs\"\n                    value={specialRequests}\n                    onChange={(e) => setSpecialRequests(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n\n                {/* Insurance Summary */}\n                <div className=\"bg-gray-50 p-6 rounded-lg\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Insurance Summary</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span>Destination:</span>\n                      <span className=\"font-medium\">{destinationCountry || \"Not specified\"}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Travel Period:</span>\n                      <span className=\"font-medium\">\n                        {travelStartDate && travelEndDate ? \n                          `${format(travelStartDate, \"PP\")} - ${format(travelEndDate, \"PP\")}` : \n                          \"Not selected\"\n                        }\n                      </span>\n                    </div>\n                    {tripDuration > 0 && (\n                      <div className=\"flex justify-between\">\n                        <span>Duration:</span>\n                        <span className=\"font-medium\">{tripDuration} day{tripDuration > 1 ? 's' : ''}</span>\n                      </div>\n                    )}\n                    <div className=\"flex justify-between\">\n                      <span>Coverage Type:</span>\n                      <span className=\"font-medium capitalize\">{coverageType} Coverage</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Number of Travelers:</span>\n                      <span className=\"font-medium\">{numberOfTravelers}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Price per traveler:</span>\n                      <span className=\"font-medium\">₹{(basePrice + premiumSurcharge).toLocaleString()}</span>\n                    </div>\n                    <div className=\"border-t pt-3 font-semibold text-lg\">\n                      <div className=\"flex justify-between\">\n                        <span>Total Amount:</span>\n                        <span className=\"text-purple-600\">₹{totalPrice.toLocaleString()}</span>\n                      </div>\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      <Badge variant=\"outline\" className=\"text-purple-600 border-purple-200 bg-purple-50\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        Delivered in 15-30 minutes\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between pt-6\">\n              <Button\n                variant=\"outline\"\n                onClick={prevStep}\n                disabled={currentStep === 1}\n                className=\"flex items-center\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Previous\n              </Button>\n\n              {currentStep < steps.length ? (\n                <Button onClick={nextStep} className=\"flex items-center bg-purple-600 hover:bg-purple-700\">\n                  Next\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              ) : (\n                <Button \n                  onClick={() => {\n                    // Save booking data to localStorage for payment page\n                    const bookingData = {\n                      serviceType: \"travel-insurance\",\n                      amount: totalPrice,\n                      travelers: numberOfTravelers,\n                      customerName: `${primaryTraveler.firstName} ${primaryTraveler.lastName}`,\n                      customerEmail: email,\n                      customerPhone: phone\n                    };\n                    localStorage.setItem(\"currentBooking\", JSON.stringify(bookingData));\n                    router.push(`/payment?service=travel-insurance&amount=${totalPrice}&travelers=${numberOfTravelers}`);\n                  }}\n                  className=\"flex items-center bg-purple-600 hover:bg-purple-700 text-lg px-8\"\n                >\n                  Proceed to Payment\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\n\n/**\n * The {@link differenceInDays} function options.\n */\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full days according to the local timezone\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n *\n * @example\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n * //=> 92\n */\nexport function differenceInDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareLocalAsc(laterDate_, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarDays(laterDate_, earlierDate_),\n  );\n\n  laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastDayNotFull = Number(\n    compareLocalAsc(laterDate_, earlierDate_) === -sign,\n  );\n\n  const result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(laterDate, earlierDate) {\n  const diff =\n    laterDate.getFullYear() - earlierDate.getFullYear() ||\n    laterDate.getMonth() - earlierDate.getMonth() ||\n    laterDate.getDate() - earlierDate.getDate() ||\n    laterDate.getHours() - earlierDate.getHours() ||\n    laterDate.getMinutes() - earlierDate.getMinutes() ||\n    laterDate.getSeconds() - earlierDate.getSeconds() ||\n    laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n\n  if (diff < 0) return -1;\n  if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInDays;\n"],"names":[],"mappings":"qhBA,EAAA,EAAA,CAAA,CAAA,OACA,EAAA,EAAA,CAAA,CAAA,OAwFA,SAAS,EAAgB,CAAS,CAAE,CAAW,EAC7C,IAAM,EACJ,EAAU,WAAW,GAAK,EAAY,WAAW,IACjD,EAAU,QAAQ,GAAK,EAAY,QAAQ,IAC3C,EAAU,OAAO,GAAK,EAAY,OAAO,IACzC,EAAU,QAAQ,GAAK,EAAY,QAAQ,IAC3C,EAAU,UAAU,GAAK,EAAY,UAAU,IAC/C,EAAU,UAAU,GAAK,EAAY,UAAU,IAC/C,EAAU,eAAe,GAAK,EAAY,eAAe,UAE3D,AAAI,EAAO,EAAU,CAAC,AAAR,EACV,EAAO,EAAU,CAAP,CAGP,CACT,CDvFA,IAAA,EAAA,EAAA,CAAA,CAAA,OASe,SAAS,IACtB,IAAM,EAAS,CAAA,EAAA,EAAA,SAAA,AAAS,IAClB,CAAC,EAAa,EAAe,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAC,GACzC,CAAC,EAAoB,EAAsB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAC,IACvD,CAAC,EAAiB,EAAmB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,IAChD,CAAC,EAAe,EAAiB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,IAC5C,CAAC,EAAmB,EAAqB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAC,GACrD,CAAC,EAAiB,EAAmB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAW,CAC/D,MAAO,GACP,UAAW,GACX,SAAU,GACV,iBAAa,CACf,GACM,CAAC,EAAO,EAAS,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAC,IAC7B,CAAC,EAAO,EAAS,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAC,IAC7B,CAAC,EAAqB,EAAuB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAa,EAAE,EACvE,CAAC,EAAc,EAAgB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAsB,SAChE,CAAC,EAAS,EAAW,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAC,IACjC,CAAC,EAAuB,EAAyB,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAC,IAC7D,CAAC,EAAiB,EAAmB,CAAG,CAAA,EAAA,EAAA,QAAQ,AAAR,EAAS,IAEjD,GAAQ,CACZ,CAAE,OAAQ,EAAG,MAAO,iBAAkB,KAAM,EAAA,MAAM,AAAC,EACnD,CAAE,OAAQ,EAAG,MAAO,uBAAwB,KAAM,EAAA,KAAK,AAAC,EACxD,CAAE,OAAQ,EAAG,MAAO,oBAAqB,KAAM,EAAA,MAAM,AAAC,EACvD,CAWK,GAA2B,CAAC,EAAe,EAAuB,KACtE,IAAM,EAAU,IAAI,EAAoB,AACxC,EAAO,CAAC,EAAM,CAAG,CAAE,GAAG,CAAO,CAAC,EAAM,CAAE,CAAC,EAAM,CAAE,CAAM,EACrD,EAAuB,EACzB,EAGM,GAAgD,KAA7B,AAAiB,CAAkB,YAAlB,EACpC,GAAa,CAAC,KAAY,EAAA,CAAgB,CAAI,EAC9C,GAAY,EAAc,GAAM,MAAM,CAAI,IAe1C,GAAe,GAAmB,EC1BnC,AD2BH,SC3B6B,AAAjB,CAA0B,CAAE,CAAW,CAAE,CAAO,EAC9D,GAAM,CAAC,EAAY,EAAa,CAAG,CAAA,EAAA,EAAA,cAAA,AAAc,OAC/C,EACA,EACA,GAGI,EALK,AAKE,EAAgB,EAAY,GACnC,EAAa,KAAK,GAAG,CACzB,CAAA,EAAA,EAAA,wBAAA,AAAwB,EAAC,EAAY,IAGvC,EAAW,OAAO,CAAC,EAAW,OAAO,GAAK,EAAO,GAIjD,IAAM,EAAmB,OACvB,EAAgB,EAAY,KAAkB,CAAC,GAG3C,EAAS,GAAQ,EAAa,CAAA,CAAd,AAA8B,CAEpD,OAAkB,IAAX,EAAe,EAAI,CAC5B,EDIqB,EAAe,GAAmB,EAAI,EAkCzD,MACE,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,wCACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,6DAEb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,6BACb,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,QAAQ,YAAY,UAAU,+CACnC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,iBAAiB,2CAGpC,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,6DAAoD,mCAGlE,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,yBAAgB,0FAM/B,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iBACb,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,kDACZ,GAAM,GAAG,CAAC,CAAC,EAAM,KAChB,IAAM,EAAgB,EAAK,IAAI,CAC/B,MACE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAEC,UAAW,CAAC,2BAA2B,EACrC,EAAQ,GAAM,MAAM,CAAG,EAAI,SAAW,GAAA,CACtC,WAEF,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CACC,UAAW,CAAC,gFAAgF,EAC1F,GAAe,EAAK,MAAM,CACtB,6CACA,gCAAA,CACJ,UAEF,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,CAAc,UAAU,cAE3B,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAW,CAAC,yBAAyB,EACzC,GAAe,EAAK,MAAM,CAAG,kBAAoB,gBAAA,CACjD,UACC,EAAK,KAAK,KAjBR,EAAK,MAAM,CAqBtB,KAEF,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,QAAQ,CAAA,CAAC,MAAO,GAAU,UAAU,WAGvC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,IAAI,CAAA,CAAC,UAAU,iBACd,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,UACT,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,SAAS,CAAA,CAAC,UAAU,8BAClB,EAAK,CAAC,EAAc,EAAE,CAAC,IAAI,EAC1B,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,gBACb,CAAA,CAAA,OAAK,CAAC,aAAa,CAAC,EAAK,CAAC,EAAc,EAAE,CAAC,IAAI,CAAE,CAAE,UAAW,SAAU,KAE3E,QACI,EAAY,KAAG,EAAK,CAAC,EAAc,EAAE,CAAC,KAAK,MAGrD,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,WAAW,CAAA,CAAC,UAAU,sBAEpB,AAAgB,OACf,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,8BACrB,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE5D,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,qBACb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CACJ,YAAY,4EACZ,MAAO,EACP,SAAU,AAAC,GAAM,EAAsB,EAAE,MAAM,CAAC,KAAK,EACrD,UAAU,eAEZ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,MAAM,CAAA,CAAC,UAAU,gFAEpB,CAAA,EAAA,EAAA,GAAA,EAAC,IAAA,CAAE,UAAU,sCAA6B,wEAK5C,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sCACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,qBAC9B,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEnD,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,OAAO,CAAA,WACN,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,cAAc,CAAA,CAAC,OAAO,CAAA,CAAA,WACrB,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CACL,QAAQ,UACR,UAAW,CAAA,EAAA,EAAA,EAAA,AAAE,EACX,kDACA,CAAC,GAAmB,mCAGtB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,YAAY,CAAA,CAAC,UAAU,iBACvB,EAAkB,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,EAAiB,OAAS,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,qBAG9D,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,cAAc,CAAA,CAAC,UAAU,sBACxB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,QAAQ,CAAA,CACP,KAAK,SACL,SAAU,EACV,SAAU,EACV,YAAY,CAAA,CAAA,YAMpB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,mBAChC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEjD,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,OAAO,CAAA,WACN,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,cAAc,CAAA,CAAC,OAAO,CAAA,CAAA,WACrB,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CACL,QAAQ,UACR,UAAW,CAAA,EAAA,EAAA,EAAA,AAAE,EACX,kDACA,CAAC,GAAiB,mCAGpB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,YAAY,CAAA,CAAC,UAAU,iBACvB,EAAgB,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,EAAe,OAAS,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,qBAG1D,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,cAAc,CAAA,CAAC,UAAU,sBACxB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,QAAQ,CAAA,CACP,KAAK,SACL,SAAU,EACV,SAAU,EACV,YAAY,CAAA,CAAA,eAOrB,GAAe,GACd,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,uCACb,CAAA,EAAA,EAAA,IAAA,EAAC,IAAA,CAAE,UAAU,gDAAsC,kBACjC,GAAa,OAAK,GAAe,EAAI,IAAM,QAKjE,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,uBAC5B,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAErD,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CAAC,MAAO,EAAkB,QAAQ,GAAI,cAAe,AAAC,GAAU,CA7NpD,AAAD,IAChC,EAAqB,GACrB,IAAM,EAAe,EAAE,CACvB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,IAAK,AAC9B,EAAa,IAAI,CAAC,CAAE,MAAO,GAAI,UAAW,GAAI,SAAU,GAAI,iBAAa,CAAU,GAErF,EAAuB,EACzB,GAsNiH,SAAS,cACxG,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,aAAa,CAAA,CAAC,UAAU,qBACvB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAA,KAEd,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,aAAa,CAAA,UACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,GAC1B,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,UAAU,CAAA,CAAW,MAAO,EAAI,QAAQ,aAAK,EAAI,YAAU,EAAM,EAAI,IAAM,KAA3D,eASZ,IAAhB,GACC,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,qBACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,4CAAmC,qBACpD,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,2CACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,SAC1C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEvC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CAAC,MAAO,EAAgB,KAAK,CAAE,cAAgB,AAAD,GAAW,EAAmB,IAAS,CAAC,EAAF,CAAK,CAAI,CAAE,MAAO,EAAK,CAAC,YACjH,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,aAAa,CAAA,UACZ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,YAAY,4BAE3B,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,aAAa,CAAA,WACZ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,cAAK,OACvB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,eAAM,QACxB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,gBAAO,SACzB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,cAAK,OACvB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,gBAAO,kBAI/B,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,cACrC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE5C,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CACJ,MAAO,EAAgB,SAAS,CAChC,SAAU,AAAC,GAAM,EAAmB,IAAS,CAAC,EAAF,CAAK,CAAI,CAAE,UAAW,EAAE,MAAM,CAAC,KAAK,CAAC,QAGrF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,aACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE3C,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CACJ,MAAO,EAAgB,QAAQ,CAC/B,SAAU,AAAC,GAAM,EAAmB,IAAS,CAAC,EAAF,CAAK,CAAI,CAAE,SAAU,EAAE,MAAM,CAAC,KAAK,CAAA,CAAC,OAGpF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,iBAClC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE/C,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,OAAO,CAAA,WACN,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,cAAc,CAAA,CAAC,OAAO,CAAA,CAAA,WACrB,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CACL,QAAQ,UACR,UAAW,CAAA,EAAA,EAAA,EAAA,AAAE,EACX,6CACA,CAAC,EAAgB,WAAW,EAAI,mCAGlC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,YAAY,CAAA,CAAC,UAAU,iBACvB,EAAgB,WAAW,CAAG,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,EAAgB,WAAW,CAAE,MAAQ,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,mBAGrF,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,cAAc,CAAA,CAAC,UAAU,sBACxB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,QAAQ,CAAA,CACP,KAAK,SACL,SAAU,EAAgB,WAAW,CACrC,SAAW,AAAD,GAAU,EAAmB,IAAS,CAAC,EAAF,CAAK,CAAI,CAAE,YAAa,EAAI,CAAC,EAC5E,YAAY,CAAA,CAAA,eAOtB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,2CACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,iBAClC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE/C,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CACJ,KAAK,QACL,YAAY,yBACZ,MAAO,EACP,SAAW,AAAD,GAAO,EAAS,EAAE,MAAM,CAAC,KAAK,OAG5C,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,gBACnC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE9C,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CACJ,YAAY,kBACZ,MAAO,EACP,SAAU,AAAC,GAAM,EAAS,EAAE,MAAM,CAAC,KAAK,UAK7C,EAAoB,GACnB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,6CAAmC,yBAC3B,EAAoB,EAAE,OAE/C,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,qBACZ,EAAoB,GAAG,CAAC,CAAC,EAAU,IAClC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAgB,UAAU,4EACzB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,SAC1C,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEvC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CAAC,MAAO,EAAS,KAAK,CAAE,cAAgB,AAAD,GAAW,GAAyB,EAAO,QAAS,aAChG,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,aAAa,CAAA,UACZ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,YAAY,4BAE3B,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,aAAa,CAAA,WACZ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,cAAK,OACvB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,eAAM,QACxB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,gBAAO,SACzB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,cAAK,OACvB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,gBAAO,kBAI/B,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,cACrC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE5C,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CACJ,MAAO,EAAS,SAAS,CACzB,SAAU,AAAC,GAAM,GAAyB,EAAO,YAAa,EAAE,MAAM,CAAC,KAAK,OAGhF,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,aACtC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE3C,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CACJ,MAAO,EAAS,QAAQ,CACxB,SAAU,AAAC,GAAM,GAAyB,EAAO,WAAY,EAAE,MAAM,CAAC,KAAK,OAG/E,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,iBAClC,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAE/C,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,OAAO,CAAA,WACN,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,cAAc,CAAA,CAAC,OAAO,CAAA,CAAA,WACrB,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CACL,QAAQ,UACR,UAAW,CAAA,EAAA,EAAA,EAAA,AAAE,EACX,qDACA,CAAC,EAAS,WAAW,EAAI,mCAG3B,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,YAAY,CAAA,CAAC,UAAU,iBACvB,EAAS,WAAW,CAAG,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,EAAS,WAAW,CAAE,MAAQ,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,mBAGvE,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,cAAc,CAAA,CAAC,UAAU,sBACxB,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,QAAQ,CAAA,CACP,KAAK,SACL,SAAU,EAAS,WAAW,CAC9B,SAAU,AAAC,GAAS,GAAyB,EAAO,cAAe,GACnE,YAAY,CAAA,CAAA,cA1DZ,cAyEP,IAAhB,GACC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,6CAAmC,wBAC7B,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEtD,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CACT,MAAO,EACP,cAAgB,AAAD,GAAgC,EAAgB,GAC/D,UAAU,qCA9XJ,AAgYL,CA/XjB,CACE,KAAM,QACN,MAAO,iBACP,MAAO,SACP,SAAU,CACR,iCACA,gCACA,gCACA,8BACA,4BACA,uCACD,AACH,EACA,CACE,KAAM,UACN,MAAO,mBACP,MAAO,SACP,SAAU,CACR,kCACA,gCACA,iCACA,8BACA,4BACA,kCACA,4BACA,2BACA,kCACD,AACH,EACD,CAkWkC,GAAG,CAAC,AAAC,GACpB,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAEJ,QAAS,EAAO,IAAI,CACpB,UAAW,CAAC,6EAA6E,EACvF,IAAiB,EAAO,IAAI,CAAG,iCAAmC,kBAAA,CAClE,WAEF,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,cAAc,CAAA,CACb,MAAO,EAAO,IAAI,CAClB,GAAI,EAAO,IAAI,CACf,UAAU,2BAEZ,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iBACb,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,sCAA8B,EAAO,KAAK,GACxD,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,8CAAsC,EAAO,KAAK,GACjE,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,iCAAwB,oBAEzC,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,6BACX,EAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAS,IAC7B,CAAA,EAAA,EAAA,IAAA,EAAC,KAAA,CAAa,UAAU,6BACtB,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,8DACd,IAFM,QAlBR,EAAO,IAAI,QA6BxB,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,2CAAiC,qBAC9B,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,SAEnD,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CAAC,MAAO,EAAS,cAAe,YACrC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,aAAa,CAAA,UACZ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,WAAW,CAAA,CAAC,YAAY,4BAE3B,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,aAAa,CAAA,WACZ,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,mBAAU,YAC5B,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,2BAAkB,oBACpC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,gCAAuB,yBACzC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,wBAAe,iBACjC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,6BAAoB,sBACtC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,+BAAsB,wBACxC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,MAAM,iBAAQ,mBAKhC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,0CAAiC,oCAClD,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,QAAQ,CAAA,CACP,YAAY,kGACZ,MAAO,EACP,SAAU,AAAC,GAAM,EAAyB,EAAE,MAAM,CAAC,KAAK,EACxD,KAAM,OAIV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,WACC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,0CAAiC,qBAClD,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,QAAQ,CAAA,CACP,YAAY,8DACZ,MAAO,EACP,SAAU,AAAC,GAAM,EAAmB,EAAE,MAAM,CAAC,KAAK,EAClD,KAAM,OAKV,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sCACb,CAAA,EAAA,EAAA,GAAA,EAAC,KAAA,CAAG,UAAU,sCAA6B,sBAC3C,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sBACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iCACb,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,iBACN,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,uBAAe,GAAsB,qBAEvD,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iCACb,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,mBACN,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,uBACb,GAAmB,EAClB,CAAA,EAAG,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,EAAiB,MAAM,GAAG,EAAE,CAAA,EAAA,EAAA,MAAA,AAAM,EAAC,EAAe,MAAA,CAAO,CACnE,oBAIL,GAAe,GACd,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iCACb,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,cACN,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,wBAAe,GAAa,OAAK,GAAe,EAAI,IAAM,SAG9E,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iCACb,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,mBACN,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,mCAA0B,EAAa,kBAEzD,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iCACb,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,yBACN,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,CAAK,UAAU,uBAAe,OAEjC,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iCACb,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,wBACN,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,wBAAc,IAAE,CA7flC,AA6fmC,KAAY,EAAA,CAAgB,CAAE,cAAc,SAE/E,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,+CACb,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,iCACb,CAAA,EAAA,EAAA,GAAA,EAAC,OAAA,UAAK,kBACN,CAAA,EAAA,EAAA,IAAA,EAAC,OAAA,CAAK,UAAU,4BAAkB,IAAE,GAAW,cAAc,WAGjE,CAAA,EAAA,EAAA,GAAA,EAAC,MAAA,CAAI,UAAU,iCACb,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,KAAK,CAAA,CAAC,QAAQ,UAAU,UAAU,2DACjC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,KAAK,CAAA,CAAC,UAAU,iBAAiB,2CAU9C,CAAA,EAAA,EAAA,IAAA,EAAC,MAAA,CAAI,UAAU,sCACb,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CACL,QAAQ,UACR,QAzgBG,CAygBM,IAxgBjB,EAAc,GAChB,AADmB,EACJ,EAAc,EAEjC,EAsgBc,SAA0B,IAAhB,EACV,UAAU,8BAEV,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,SAAS,CAAA,CAAC,UAAU,iBAAiB,cAIvC,EAAc,GAAM,MAAM,CACzB,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CAAC,QAxhBL,CAwhBc,IAvhBzB,EAAc,GAAM,MAAM,EAAE,AAC9B,EAAe,EAAc,EAEjC,EAohByC,UAAU,gEAAsD,OAEzF,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,UAAU,oBAGxB,CAAA,EAAA,EAAA,IAAA,EAAC,EAAA,MAAM,CAAA,CACL,QAAS,KAEP,IAAM,EAAc,CAClB,YAAa,mBACb,OAAQ,GACR,UAAW,EACX,aAAc,CAAA,EAAG,EAAgB,SAAS,CAAC,CAAC,EAAE,EAAgB,QAAQ,CAAA,CAAE,CACxE,cAAe,EACf,cAAe,CACjB,EACA,aAAa,OAAO,CAAC,iBAAkB,KAAK,SAAS,CAAC,IACtD,EAAO,IAAI,CAAC,CAAC,yCAAyC,EAAE,GAAW,WAAW,EAAE,EAAA,CAAmB,CACrG,EACA,UAAU,6EACX,qBAEC,CAAA,EAAA,EAAA,GAAA,EAAC,EAAA,UAAU,CAAA,CAAC,UAAU,iCASxC","ignoreList":[1]}