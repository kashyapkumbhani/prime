{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/anushri509/CascadeProjects/prime/app/api/orders/%5BorderId%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport async function GET(request: NextRequest, { params }: { params: Promise<{ orderId: string }> }) {\n  try {\n    const { orderId } = await params;\n\n    const order = await prisma.order.findUnique({\n      where: { id: orderId },\n      include: {\n        customer: true,\n        travelers: true,\n      }\n    });\n\n    if (!order) {\n      return NextResponse.json(\n        { error: 'Order not found' },\n        { status: 404 }\n      );\n    }\n\n    // Format the order data for the frontend\n    const formattedOrder = {\n      id: order.id,\n      serviceType: order.serviceType,\n      customer: {\n        name: order.customerName, // Using customerName from Order model\n        email: order.customerEmail, // Using customerEmail from Order model\n        phone: order.customerPhone // Using customerPhone from Order model\n      },\n      totalAmount: order.totalAmount,\n      status: order.status,\n      createdAt: order.createdAt.toISOString(),\n      completedAt: order.completedAt?.toISOString(),\n      travelers: order.travelers,\n      numberOfTravelers: order.travelers.length,\n      paymentMethod: order.paymentMethod\n    };\n\n    return NextResponse.json({\n      success: true,\n      order: formattedOrder\n    });\n\n  } catch (error) {\n    console.error('Error fetching order:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch order details' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6IAAY;AAExB,eAAe,IAAI,OAAoB,EAAE,EAAE,MAAM,EAA4C;IAClG,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM;QAE1B,MAAM,QAAQ,MAAM,OAAO,KAAK,CAAC,UAAU,CAAC;YAC1C,OAAO;gBAAE,IAAI;YAAQ;YACrB,SAAS;gBACP,UAAU;gBACV,WAAW;YACb;QACF;QAEA,IAAI,CAAC,OAAO;YACV,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkB,GAC3B;gBAAE,QAAQ;YAAI;QAElB;QAEA,yCAAyC;QACzC,MAAM,iBAAiB;YACrB,IAAI,MAAM,EAAE;YACZ,aAAa,MAAM,WAAW;YAC9B,UAAU;gBACR,MAAM,MAAM,YAAY;gBACxB,OAAO,MAAM,aAAa;gBAC1B,OAAO,MAAM,aAAa,CAAC,uCAAuC;YACpE;YACA,aAAa,MAAM,WAAW;YAC9B,QAAQ,MAAM,MAAM;YACpB,WAAW,MAAM,SAAS,CAAC,WAAW;YACtC,aAAa,MAAM,WAAW,EAAE;YAChC,WAAW,MAAM,SAAS;YAC1B,mBAAmB,MAAM,SAAS,CAAC,MAAM;YACzC,eAAe,MAAM,aAAa;QACpC;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;QACT;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAgC,GACzC;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}