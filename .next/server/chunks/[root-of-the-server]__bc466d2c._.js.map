{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/anushri509/CascadeProjects/prime/app/api/admin/orders/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport async function GET() {\n  try {\n    // Fetch all orders with their details\n    const ordersFromDb = await prisma.order.findMany({\n      include: {\n        customer: true,\n        travelers: true,\n      },\n      orderBy: {\n        createdAt: 'desc'\n      }\n    });\n\n    // Format orders for the dashboard\n    const orders = ordersFromDb.map(order => ({\n      id: order.id,\n      serviceType: order.serviceType,\n      customerName: order.customer.name,\n      customerEmail: order.customer.email,\n      customerPhone: order.customer.phone,\n      numberOfTravelers: order.travelers.length,\n      totalAmount: order.totalAmount,\n      status: order.status.toLowerCase(),\n      createdAt: order.createdAt.toISOString(),\n      completedAt: order.completedAt?.toISOString(),\n      flightBooking: order.flightFrom || order.flightTo ? {\n        from: order.flightFrom,\n        to: order.flightTo,\n        departureDate: order.departureDate,\n        returnDate: order.returnDate\n      } : null,\n      hotelBooking: order.destination ? {\n        destination: order.destination,\n        checkinDate: order.checkinDate,\n        checkoutDate: order.checkoutDate\n      } : null,\n      insuranceBooking: order.coverageType ? {\n        coverage: order.coverageType,\n        tripValue: order.tripValue\n      } : null\n    }));\n\n    // Calculate statistics\n    const totalRevenue = orders.reduce((sum, order) => sum + order.totalAmount, 0);\n    const totalOrders = orders.length;\n    const pendingOrders = orders.filter(order => order.status === 'PENDING').length;\n    const completedOrders = orders.filter(order => order.status === 'COMPLETED').length;\n\n    // Get recent orders (last 5)\n    const recentOrders = orders.slice(0, 5);\n\n    const stats = {\n      totalRevenue,\n      totalOrders,\n      pendingOrders,\n      completedOrders\n    };\n\n    return NextResponse.json({\n      orders: recentOrders,\n      stats,\n      allOrders: orders\n    });\n\n  } catch (error) {\n    console.error('Error fetching orders:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch orders' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6IAAY;AAExB,eAAe;IACpB,IAAI;QACF,sCAAsC;QACtC,MAAM,eAAe,MAAM,OAAO,KAAK,CAAC,QAAQ,CAAC;YAC/C,SAAS;gBACP,UAAU;gBACV,WAAW;YACb;YACA,SAAS;gBACP,WAAW;YACb;QACF;QAEA,kCAAkC;QAClC,MAAM,SAAS,aAAa,GAAG,CAAC,CAAA,QAAS,CAAC;gBACxC,IAAI,MAAM,EAAE;gBACZ,aAAa,MAAM,WAAW;gBAC9B,cAAc,MAAM,QAAQ,CAAC,IAAI;gBACjC,eAAe,MAAM,QAAQ,CAAC,KAAK;gBACnC,eAAe,MAAM,QAAQ,CAAC,KAAK;gBACnC,mBAAmB,MAAM,SAAS,CAAC,MAAM;gBACzC,aAAa,MAAM,WAAW;gBAC9B,QAAQ,MAAM,MAAM,CAAC,WAAW;gBAChC,WAAW,MAAM,SAAS,CAAC,WAAW;gBACtC,aAAa,MAAM,WAAW,EAAE;gBAChC,eAAe,MAAM,UAAU,IAAI,MAAM,QAAQ,GAAG;oBAClD,MAAM,MAAM,UAAU;oBACtB,IAAI,MAAM,QAAQ;oBAClB,eAAe,MAAM,aAAa;oBAClC,YAAY,MAAM,UAAU;gBAC9B,IAAI;gBACJ,cAAc,MAAM,WAAW,GAAG;oBAChC,aAAa,MAAM,WAAW;oBAC9B,aAAa,MAAM,WAAW;oBAC9B,cAAc,MAAM,YAAY;gBAClC,IAAI;gBACJ,kBAAkB,MAAM,YAAY,GAAG;oBACrC,UAAU,MAAM,YAAY;oBAC5B,WAAW,MAAM,SAAS;gBAC5B,IAAI;YACN,CAAC;QAED,uBAAuB;QACvB,MAAM,eAAe,OAAO,MAAM,CAAC,CAAC,KAAK,QAAU,MAAM,MAAM,WAAW,EAAE;QAC5E,MAAM,cAAc,OAAO,MAAM;QACjC,MAAM,gBAAgB,OAAO,MAAM,CAAC,CAAA,QAAS,MAAM,MAAM,KAAK,WAAW,MAAM;QAC/E,MAAM,kBAAkB,OAAO,MAAM,CAAC,CAAA,QAAS,MAAM,MAAM,KAAK,aAAa,MAAM;QAEnF,6BAA6B;QAC7B,MAAM,eAAe,OAAO,KAAK,CAAC,GAAG;QAErC,MAAM,QAAQ;YACZ;YACA;YACA;YACA;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,QAAQ;YACR;YACA,WAAW;QACb;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}